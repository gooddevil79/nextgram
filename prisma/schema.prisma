// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String?   @unique
  image     String?
  name      String?
  posts     Post[]
  password  String
  username  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
}

model Post {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  body         String
  imageUrl     String?
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String    @db.ObjectId
  comments     Comment[]
  likes        Like[]
  likeCount    Int       @default(0) @db.Int
  dislikeCount Int       @default(0) @db.Int
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  value     Int // 1 for like, -1 for dislike
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
